meta {
  name: Firebase Commits function
  type: http
  seq: 5
}

get {
  url: {{api_url}}?target=commit&months=6
  body: none
  auth: none
}

params:query {
  target: commit
  months: 6
}

tests {
  test("Status code is 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response is an array", function() {
    expect(res.getBody()).to.be.an("array");
  });
  
  test("Each item has date and value as numbers", function() {
    res.getBody().forEach(item => {
      expect(item).to.have.property("date").that.is.a("number");
      expect(item).to.have.property("value").that.is.a("number");
    });
  });
  
  // test first item date is a unix timestamp in milliseconds
  // date is within the last 6 + 1 months
  test("First item date is a unix timestamp in milliseconds within the last (6+1) months", function() {
    const firstItem = res.getBody()[0];
    const now = Date.now();
    const sixMonthsAgo = now - (6 * 30 * 24 * 60 * 60 * 1000);
    const sevenMonthsAgo = now - (7 * 30 * 24 * 60 * 60 * 1000);
    expect(firstItem.date).to.be.a("number");
    expect(firstItem.date).to.be.within(sevenMonthsAgo, now);
  });
}

settings {
  encodeUrl: true
}

docs {
  # Firebase Function Notion API Test
  
  This request tests a Firebase function endpoint that retrieves data from Notion.
  
  ## Expected Response
  
  The API should return a JSON object containing various sections of data, including:
  - `tech_stack`: An array of technologies with details such as name, URL, description, and rank.
  - `experience`: An array of professional experiences.
  - `hobbies`: An array of hobbies.
  - `education`: An array of educational qualifications.
  - `stuff`: An array of miscellaneous items.
  
  ## Tests Performed
  
  1. Verify HTTP status code is 200
  2. Verify response is valid JSON
  3. Verify response contains key sections: `tech_stack`, `experience`, `hobbies`, `education`, and `stuff`
  4. Verify `tech_stack` is an array
  5. Verify `tech_stack` contains an entry for "Java" with correct properties
}
