#!/usr/bin/env node

/**
 * Generate environment.ts and environment.prod.ts files from environment variables
 * This script reads .env file and populates the environment configuration
 * 
 * Usage: node scripts/generate-env.js [--production]
 */

const fs = require('fs');
const path = require('path');

// Parse command line arguments
const isProduction = process.argv.includes('--production');

// Load .env file if it exists
const envPath = path.resolve(__dirname, '../.env');
const envLocalPath = path.resolve(__dirname, '../.env.local');

// Function to parse .env file manually (avoiding external dependencies)
function parseEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    return {};
  }
  
  const envVars = {};
  const envContent = fs.readFileSync(filePath, 'utf8');
  
  envContent.split('\n').forEach(line => {
    // Skip comments and empty lines
    line = line.trim();
    if (!line || line.startsWith('#')) {
      return;
    }
    
    // Parse KEY=VALUE
    const match = line.match(/^([^=]+)=(.*)$/);
    if (match) {
      const key = match[1].trim();
      let value = match[2].trim();
      
      // Remove quotes if present
      if ((value.startsWith('"') && value.endsWith('"')) || 
          (value.startsWith("'") && value.endsWith("'"))) {
        value = value.slice(1, -1);
      }
      
      envVars[key] = value;
    }
  });
  
  return envVars;
}

// Load environment variables from .env files
const envVars = {
  ...parseEnvFile(envPath),
  ...parseEnvFile(envLocalPath), // .env.local overrides .env
  ...process.env, // Process env overrides file-based env
};

// Helper function to get env variable with fallback
function getEnv(key, defaultValue = '') {
  return envVars[key] || defaultValue;
}

// Generate environment configuration
const environmentConfig = {
  production: isProduction,
  apiUrl: getEnv('NG_API_URL', 'https://api.3dime.com'),
  firebase: {
    apiKey: getEnv('NG_FIREBASE_API_KEY', ''),
    authDomain: getEnv('NG_FIREBASE_AUTH_DOMAIN', ''),
    projectId: getEnv('NG_FIREBASE_PROJECT_ID', ''),
    storageBucket: getEnv('NG_FIREBASE_STORAGE_BUCKET', ''),
    messagingSenderId: getEnv('NG_FIREBASE_MESSAGING_SENDER_ID', ''),
    appId: getEnv('NG_FIREBASE_APP_ID', ''),
  },
};

// Generate TypeScript content
const tsContent = `// This file is auto-generated by scripts/generate-env.js
// DO NOT EDIT MANUALLY - Changes will be overwritten
// Configure values in .env file instead

export const environment = ${JSON.stringify(environmentConfig, null, 2)};
`;

// Determine output file
const outputFile = isProduction 
  ? path.resolve(__dirname, '../src/environments/environment.prod.ts')
  : path.resolve(__dirname, '../src/environments/environment.ts');

// Write the file
fs.writeFileSync(outputFile, tsContent);

console.log(`✓ Generated ${isProduction ? 'production' : 'development'} environment file`);
console.log(`  Output: ${outputFile}`);

// Show warning if no .env file exists
if (!fs.existsSync(envPath) && !fs.existsSync(envLocalPath)) {
  console.warn('\n⚠ Warning: No .env or .env.local file found');
  console.warn('  Copy .env.example to .env and configure your environment variables');
  console.warn('  Using default/empty values for now\n');
}
