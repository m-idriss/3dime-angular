#!/usr/bin/env node

/**
 * Test script for generate-env.js
 * Tests various scenarios for environment file generation
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const scriptsDir = path.resolve(__dirname);
const rootDir = path.resolve(scriptsDir, '..');
const envPath = path.join(rootDir, '.env');
const envLocalPath = path.join(rootDir, '.env.local');
const envOutputPath = path.join(rootDir, 'src/environments/environment.ts');
const envProdOutputPath = path.join(rootDir, 'src/environments/environment.prod.ts');

let exitCode = 0;

// Helper to run command and capture output
function runCommand(cmd) {
  try {
    return execSync(cmd, { cwd: rootDir, encoding: 'utf-8' });
  } catch (error) {
    console.error(`Command failed: ${cmd}`);
    console.error(error.message);
    exitCode = 1;
    return '';
  }
}

// Helper to clean up test files
function cleanup() {
  [envPath, envLocalPath].forEach(file => {
    if (fs.existsSync(file)) {
      fs.unlinkSync(file);
    }
  });
}

// Helper to read and check file content
function checkFileContains(filePath, expectedStrings) {
  if (!fs.existsSync(filePath)) {
    console.error(`✗ File not found: ${filePath}`);
    return false;
  }
  
  const content = fs.readFileSync(filePath, 'utf-8');
  
  for (const str of expectedStrings) {
    if (!content.includes(str)) {
      console.error(`✗ Expected string not found: "${str}"`);
      console.error(`In file: ${filePath}`);
      return false;
    }
  }
  
  return true;
}

// Test 1: Generate without .env file
console.log('\n=== Test 1: Generate without .env file ===');
cleanup();
runCommand('node scripts/generate-env.js');

if (checkFileContains(envOutputPath, [
  'export const environment',
  '"production": false',
  'auto-generated by scripts/generate-env.js'
])) {
  console.log('✓ Test 1 passed: Default development environment generated');
} else {
  exitCode = 1;
}

// Test 2: Generate with .env file
console.log('\n=== Test 2: Generate with .env file ===');
fs.writeFileSync(envPath, `NG_API_URL=https://test-api.example.com
NG_FIREBASE_API_KEY=test_key_123
NG_FIREBASE_PROJECT_ID=test-project
`);

runCommand('node scripts/generate-env.js');

if (checkFileContains(envOutputPath, [
  '"apiUrl": "https://test-api.example.com"',
  '"apiKey": "test_key_123"',
  '"projectId": "test-project"'
])) {
  console.log('✓ Test 2 passed: Values loaded from .env file');
} else {
  exitCode = 1;
}

// Test 3: Generate with .env.local override
console.log('\n=== Test 3: Generate with .env.local override ===');
fs.writeFileSync(envLocalPath, `NG_FIREBASE_API_KEY=local_override_key
`);

runCommand('node scripts/generate-env.js');

if (checkFileContains(envOutputPath, [
  '"apiKey": "local_override_key"'
])) {
  console.log('✓ Test 3 passed: .env.local overrides .env');
} else {
  exitCode = 1;
}

// Test 4: Production flag
console.log('\n=== Test 4: Production flag ===');
cleanup();

runCommand('node scripts/generate-env.js --production');

if (checkFileContains(envProdOutputPath, [
  '"production": true',
  'export const environment'
])) {
  console.log('✓ Test 4 passed: Production flag sets production=true');
} else {
  exitCode = 1;
}

// Test 5: npm script integration
console.log('\n=== Test 5: npm script integration ===');
const packageJson = JSON.parse(fs.readFileSync(path.join(rootDir, 'package.json'), 'utf-8'));

if (packageJson.scripts.prebuild === 'node scripts/generate-env.js' &&
    packageJson.scripts.prestart === 'node scripts/generate-env.js') {
  console.log('✓ Test 5 passed: npm scripts configured correctly');
} else {
  console.error('✗ Test 5 failed: npm scripts not configured');
  exitCode = 1;
}

// Cleanup and regenerate defaults
console.log('\n=== Cleanup: Regenerating default environments ===');
cleanup();
runCommand('node scripts/generate-env.js');
runCommand('node scripts/generate-env.js --production');

console.log('\n=== All tests completed ===');
if (exitCode === 0) {
  console.log('✓ All tests passed!');
} else {
  console.error('✗ Some tests failed');
}

process.exit(exitCode);

